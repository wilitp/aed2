1) Implementar Stack of T usando List of T como su representacion interna.
type Stack of T := List of T

# constructors

fun empty_stack() ret s : Stack of T
  s := empty_list();
endfun

proc push(in/out s : Stack of T, in e : T)
  addl(s, e)
endproc

# operations

fun top(s : Stack of T) ret t : T
  t := head(s)
endfun

proc pop(in/out s : Stack of T)
  drop(s, 1) 
endproc

fun stack_is_empty(s : Stack of T) ret b : Bool
  b := list_is_empty(s)
endfun

# destroy

proc destroy(in/out s : Stack of T)
  destroy(s) 
endproc

2) Implementar Stack of T usando pointer of (Node of T) como su representacion interna. Tenemos que Node of T es:

type Node of T = tuple
                   next : pointer (Node of T)
                   elem : T


type Stack of T = pointer of (Node of T)

# constructors

fun empty_stack() ret s : Stack of T
  s := null
endfun

proc push(in/out s : Stack of T, in e : T)
  var p : pointer of (Node of T);
  alloc(p);
  p->elem := e;
  p->next := s;
  s := p;
endproc

# operations

fun top(s : Stack of T) ret t : T
  t := s->elem
endfun

proc pop(in/out s : Stack of T)
  var r : pointer of (Node of T);
  r := s;
  s := s->next;
  free(r)
endproc

fun stack_is_empty(s : Stack of T) ret b : Bool
  b := s = null;
endfun

# destroy

proc destroy(in/out s : Stack of T)
  var i : pointer of (Node of T);
  var j : pointer of (Node of T);
  i := s;
  while i != null do
    j := i;
    i := i->next;
    free(j)
  od
endproc

3. (a) Implementá el TAD Cola utilizando la siguiente representación, donde N es una constante de tipo nat:
implement Queue of T where

type Queue of T = tuple
                    elems : array[0..N-1] of T
                    size : nat
                  end tuple

# constructors

fun empty_queue() ret q : Queue of T
  q.size = 0;
endfun

{- PRE: q.size < N}
proc enqueue(in/out q : Queue of T, in e : T)
  q.elems[q.size] := e;
  q.size := q.size + 1;
endproc 

# operations

fun q_is_empty(q : Queue of T) ret b
  b := q.size = 0 
endfun

fun first(q : Queue of T) ret t : T
  t = q.elems[0]
endfun

{- PRE: not q_is_empty(q) -}
proc dequeue(in/out q : Queue of T)
  for i:=0 to q.size-2 do
    q.elems[i] := q.elems[i+1]
  od
  q.size := q.size-1
endproc

# destroy

proc destroy(in/out q : Queue of T)
  skip;
endproc

(b) Implementá el TAD Cola utilizando un arreglo como en el inciso anterior, 
pero asegurando que todas las operaciones estén implementadas en orden constante.

- Ayuda1: Quizás convenga agregar algún campo más a la tupla. ¿Estamos obligados a que el
primer elemento de la cola esté representado con el primer elemento del arreglo?
- Ayuda2: Buscar en Google aritmética modular.

type Queue of T = tuple
                    elems : array[0..N-1] of T
                    first : nat
                    size : nat
                  end tuple

# constructors

fun empty_queue() ret q : Queue of T
  q.size = 0;
  q.size = 0;
endfun

{- PRE: q.size < N}
proc enqueue(in/out q : Queue of T, in e : T)
  q.elems[(q.first+q.size) % N] := e;
  q.size := q.size + 1;
endproc 

# operations

fun q_is_empty(q : Queue of T) ret b
  b := q.size = 0 
endfun

fun first(q : Queue of T) ret t : T
  t = q.elems[q.first]
endfun

{- PRE: not q_is_empty(q) -}
proc dequeue(in/out q : Queue of T)
  q.size := q.size-1
  q.first := (q.first+1) % N
endproc

# destroy

proc destroy(in/out q : Queue of T)
  skip;
endproc


# 4
-- Tipos dados
type Direction = enumerate
                    Left
                    Right

type Path = List of Direction

-- Resolucion del ej
implement Tree of T where

type Node of T = tuple
                   left: pointer to (Node of T)
                   value: T
                   right: pointer to (Node of T)
                 end tuple

type Tree of T = pointer to (Node of T)

# constructors 

fun empty_tree() ret t : Tree of T
  {- crea una arbol vacio -}
  t = null;
endfun

fun node (tl : Tree of T, e : T, tr : Tree of T) ret t : Tree of T
  alloc(t);
  t->value := e;
  t->left := tl;
  t->right := tr;
endfun

# operations

fun is_empty_tree(t : Tree of T) ret b : Bool
  b := t = null;
endfun

fun root(t : Tree of T) ret e : T
  e := t->value;
endfun

fun left(t : Tree of T) ret tl : Tree of T
  e := t->left;
endfun

fun right(t : Tree of T) ret tr : Tree of T
  e := t->right;
endfun

fun height(t : Tree of T) ret n : Nat
  if t != null then
    n := 1 + max(height(t->left), height(t->right));
  else
    n := 0;
endfun


fun is_path(t : Tree of T, p : Path) ret b : Bool
  b := true;
  var d : Direction;
  while not is_empty(p) && b do
    d = head(p);
    if(d = Left && t->left = null) then b := false;
    if(d = Right && t->right = null) then b := false;
    tail(d)
  od
endfun

fun subtree_at(t : Tree of T, p : Path) ret t0 : Tree of T
  {- Asumiendo que is_path(t, p) -}
  t0 := t;
  while not is_empty(Path) do
    if(head(p) = Left) then t0 := t0->left;
    if(head(p) = Right) then t0 := t0->right;
    tail(p)
  od
endfun

fun elem_at(t : Tree of T, p : Path) ret e : T
  e = root(subtree_at(t, p));
endfun

# 5 Implementar un diccionario usando tuplas (Key, Value)

a)
spec Dict of (K, V) where
constructors

fun emptyDict() ret d : Dict of (K, V);

proc setKey(in/out d : Dict of (K, V), in key : K, in value : V);

operations

fun isEmptyDict(d : Dict of (K, V)) ret b : Bool;

fun hasAttr(d : Dict of (K, V)) ret b : Bool;

fun getAttr(d : Dict of (K, V)) ret v : V;

proc deleteAttr(in/out d : Dict of (k, V), in k : K);

fun keys(d : Dict of (K, V));

destroy
proc destroy(in/out d : Dict of (k, V))

implement Dict of (K, V) where 

type DictNode of (K, V) = tuple
                  key   : K
                  value : V
                  left  : pointer to DictNode of (K, V)
                  left  : pointer to DictNode of (K, v)
                endtuple

type Dict of (K, V) = pointer to DictNode

fun emptyDict() ret d : Dict of (K, V)
  d := null;
endfun

-- Version recursiva
proc setKey(in/out dict : Dict of (K, V), in k : K, in v : V)
  {- Dict es un arbol binario de busqueda si tenemos en cuenta las key de los nodos -}

  if d = null then
    alloc(n);
    d->left := null;
    d->right := null;
    d->key := k;
    d->v := v;
  else if(k < d->key)
    setKey(d->left, k, v);
  else if(k > d->key)
    setKey(d->right, k, v);
  else
    d->value := v;
endproc

-- Version iterativa
proc setKey(in/out dict : Dict of (K, V), in k : K, in v : V)
  {- Dict es un arbol binario de busqueda si tenemos en cuenta las key de los nodos -}
  var n : DictNode of (K, V);
  n := d;
  var set : Bool;
  set := false;

  while not set do
    if d = null then
      alloc(n);
      n->left := null;
      n->right := null;
      n->key := k;
      n->v := v;
      set := true;
    else if(k < d->key)
      n := n->left
    else if(k > d->key)
      n := n->right
    else
      n->value := v;
      set := true;
  od
endproc

fun isEmptyDict(d : Dict of (K, V)) ret b : Bool
  b := d = null;
endfun

fun hasAttr(d : Dict of (K, V), k : K) ret b : Bool
  b := false;
  if(d != null)
    if(k = d->key)
      b := true;
    if(k < d->key)
      b := hasAttr(d->left, k);
    if(k > d->key)
      b := hasAttr(d->right, k);
endfun

fun getAttr(d : Dict of (K, V), k : K) ret v : V
  if(d != null)
    if(k = d->key)
      v := d->value;
    if(k < d->key)
      v := getAttr(d->left, k);
    if(k > d->key)
      v := getAttr(d->right, k);
endfun

proc findParent(in/out d : Dict of (K, V))

proc _addNode(in/out d : Dict of (K, V), in nk : pointer to DictNode of (K, V))
  {- Se asume que no hay un nodo con la misma key -}
  if nk != null then
    // Desenlazamos los nodos hijos
    nk->left := null;
    nk->right := null;
    // Variable para iterar entre los nodos del target
    var i : pointer to DictNode of (K, V);
    i := d;
     
    // Recorrer el arbol y parar cuando se encuentra un lugar para insertar el nodo
    if(d != null) then
      while i != null do
        if(nk->key < i->key) then
          if i->left = null then
            i->left := nk;
            i := null;
          else
            i := i->left;
        else if(k >= i->key) then
          if i->right = null then
            i->right := nk;
            i := null;
          else
            i := i->right;
      else
        d := nk;
  od
endproc

proc _mergeDict(in/out target : Dict of (K, V), in/out src : Dict of (K, V))
  var l, r : DictNode of (K, V);
  while src != null do
    // Guardo las ramas, ya que addNode las borra del nodo
    l := src->left; 
    r := src->right; 

    // Agrego el nodo
    addNode(target, src);

    // mergeo cada rama del nodo que acabo de agregar
    _mergeDict(target, l);
    _mergeDict(target, r);
  od
endproc

proc checkForKeyAndUpdateParent(in/out p, i : pointer to Node of (K, V), k)
  if i != null then
    if k = i->key then
      l := i->left;
      r := i->right;
      free(i);
      i := null;
      _mergeDict(p, l);
      _mergeDict(p, r);
    else if k < i->key then
      p := i;
endproc

// Forma que trata de reusar la mayor cantidad de memoria posible
proc deleteAttr(in/out d : Dict of (K, V), in k : K)
  var l, r : pointer to DictNode of (K, V);
  if(d != null) then
    // Si root tiene la key, entonces borramos el nodo y mergeamos los subarboles
    if d->key = k then
      l := d->left;
      r := d->right;
      free(d);
      d = null;
      _mergeDict(d, l);
      _mergeDict(d, r);

    else
      // Trackeamos al parent(p) y en base a si k es mayor o menor a su key, decidimos el i(child)
      // Checkeamos si ese child tiene o no la key y procedemos como corresponda.
      // Si no la tiene, p pasara a ser el child
      var i : pointer to DictNode of (K, V);
      p := d;
      i := d;
      while i != null:
        { INV: k != p->key}
        if k < p->key then
          i := p->left;
          checkForKeyAndUpdateParent(p, i, k);
        if k > p->key then
          i := p->right;
          checkForKeyAndUpdateParent(p, i, k);
endproc

proc _addKeysRec(dn : pointer to DictNode of (K, V), ks : List of K)
  if(dn != null)
    addl(ks, dn->key);
    _addKeyRec(dn->left, ks);
    _addKeyRec(dn->right, ks);
endproc

fun keys(d : Dict of (K, V)) ret ks : List of K
  ks := empty_list();
  _addKeysRec(d, ks);
endfun

# 6 Decir cuales de estas secuencias no es posible en una busqueda binaria al buscar 363:

(a) 2, 252, 401, 398, 330, 344, 397, 363. -> Todo bien
(b) 924, 220, 911, 244, 898, 258, 362, 363. -> Todo bien
(c) 925, 202, 911, 240, 912, 245, 363. -> Esta mal, ya que los subarboles debajo de 240 no pueden tener numeros mayores a 911(Y encontramos un 912).
(d) 2, 399, 387, 219, 266, 382, 381, 278, 363. -> Todo bien
(e) 935, 278, 347, 621, 299, 392, 358, 363. -> Todo lo que esté a la derecha de 347 debe de ser mas grande, pero nos encontramos un 299

# Dar dos secuencias de incersion que nos den el siguiente arbol binario:

            22
      10          35
    6     19   25      52
  4     15        33  49 53
     11  18

una secuencia sería
22, 10, 6, 4, 19, 15, 11, 18, 35, 25, 52, 33, 52, 49, 53

otra posible en la que solo cambiamos el orden en el que agregamos dos hojas
22, 10, 6, 4, 19, 15, 11, 18, 35, 25, 52, 33, 52, 53, 49
